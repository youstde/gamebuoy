const http = require('http');
const through = require('through-gulp');
const path = require('path');
const moment = require('moment');
const { URL, URLSearchParams } = require('url');

class Serve{
    start(options = {}){
        var self = this;
        this.options = options;
        this.createServer();
        var stream = through(function (vinyl, encoding, callback) {
            if (vinyl.isBuffer()) {
                if(self.filterFile(vinyl)){
                    self.pushFile(vinyl);
                }
            }
            this.push(vinyl);
            callback();
        });
        return stream;
    }

    pushFile(vinyl){
        var options = this.options;
        this.files = this.files || {};
        var filename = '/' + vinyl.relative;
        filename = path.resolve(filename);
        if(options.prePath){
            filename = path.resolve(options.prePath+filename);
        }
        this.files[filename] = vinyl;
        console.log(moment().format('hh:mm:ss')+' serverfile:'+filename);
    }

    createServer(){
        var self = this;
        var options = this.options;
        var port = options.port || 80;
        var headers = options.headers || {};
        const server = http.createServer((req, res) => {
            const myURL = new URL('http://127.0.0.1'+req.url);
            var callbackString = myURL.searchParams.get('callback');
            var content = self.getContent(req);
            if(callbackString){
                content = callbackString+'('+content+')';
            }
            res.writeHead(200,headers);
            res.write(content);
            res.end();
        });

        server.on('clientError', (err, socket) => {
            socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
        });

        server.listen(port,function(){
            console.log('server:http://127.0.0.1:'+port);
        });
    }

    getContent(req){
        var url = path.resolve(req.url);
        url = url.replace(/\?.+/,'');
        var vinyl = this.files[url];
        var content = '';
        if(vinyl){
            if(/\.(png|jpeg|jpg|gif|webp|ico)/i.test(vinyl.path)){
                content = vinyl.contents;
            }else{
                content = vinyl.contents.toString();
            }
        }
        return content;
    }
}


class ServeCdn extends Serve{
    constructor(){
        super();
    }
    filterFile(vinyl){
        if(vinyl.isCdn){
            return true;
        }
    }
}


class ServeSrc extends Serve{
    constructor(){
        super();
    }
    filterFile(vinyl){
        if(!vinyl.isCdn){
            return true;
        }
    }
}


class ServeAll extends Serve{
    constructor(){
        super();
    }
    filterFile(vinyl){
        return true;
    }
}

var serveAll = new ServeAll();
var serveSrc = new ServeSrc();
var serveCdn = new ServeCdn();

var Build = {
    all:function(options){
        Build.all = function(){
            throw 'serve.all can be call once only';
        };
        return serveAll.start(options);
    },
    src:function(options){
        Build.src = function(){
            throw 'serve.src can be call once only';
        };
        return serveSrc.start(options);
    },
    cdn:function(options){
        Build.cdn = function(){
            throw 'serve.cdn can be call once only';
        };
        return serveCdn.start(options);
    }
};

module.exports = Build;